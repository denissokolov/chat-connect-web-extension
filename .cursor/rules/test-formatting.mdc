---
description:
globs:
alwaysApply: false
---
# Test Formatting Rules

When writing tests, do not include "// Arrange", "// Act", or "// Assert" comments. The test structure should be clear from the code itself without these explicit comments.

## Comment Guidelines

Write comments that explain **why** something is done, not **what** is being done. The code should be self-explanatory for what it does.

### Good Comments (explain reasoning):
```typescript
it('should handle edge case with empty string', () => {
  // Edge case: empty strings should return null to prevent downstream errors
  const result = parseUserInput('')
  expect(result).toBeNull()
})

it('should use setTimeout for async operation', () => {
  // Simulating real API delay to test race condition handling
  setTimeout(() => {
    expect(mockCallback).toHaveBeenCalled()
  }, 100)
})
```

### Avoid Comments (describe what code does):
```typescript
it('should return text content', () => {
  // Set innerHTML
  document.body.innerHTML = '<h1>Hello World</h1>'
  
  // Call the function
  const result = getH1Text()
  
  // Check the result
  expect(result).toBe('Hello World')
})
```

## Test Structure Examples

### Good Example:
```typescript
it('should return the text content of an h1 element', () => {
  document.body.innerHTML = '<h1>Hello World</h1>'
  
  const result = getH1Text()
  
  expect(result).toBe('Hello World')
})
```

### Avoid:
```typescript
it('should return the text content of an h1 element', () => {
  // Arrange
  document.body.innerHTML = '<h1>Hello World</h1>'
  
  // Act
  const result = getH1Text()
  
  // Assert
  expect(result).toBe('Hello World')
})
```

Keep tests clean and readable. Use comments only when the reasoning behind the test setup or expectations isn't immediately clear from the business logic.
